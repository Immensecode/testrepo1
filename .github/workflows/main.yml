name: Blue-Green Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install

    - name: Create deployment scripts
      run: |
        mkdir -p scripts
        echo '#!/bin/bash' > scripts/install_dependencies.sh
        echo 'sudo apt-get update' >> scripts/install_dependencies.sh
        echo 'sudo apt-get install -y nginx' >> scripts/install_dependencies.sh
        chmod +x scripts/install_dependencies.sh

        echo '#!/bin/bash' > scripts/start_server.sh
        echo 'sudo systemctl start nginx' >> scripts/start_server.sh
        chmod +x scripts/start_server.sh

        echo '#!/bin/bash' > scripts/stop_server.sh
        echo 'sudo systemctl stop nginx' >> scripts/stop_server.sh
        chmod +x scripts/stop_server.sh

    - name: Zip application files
      run: zip -r TextUtility1.zip . -x .git/\*

    - name: Deploy to Blue environment (Server1)
      run: |
        scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa TextUtility1.zip ec2-user@143.205.147.204:/home/ec2-user/
        scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r scripts ec2-user@143.205.147.204:/home/ec2-user/
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@143.205.147.204 'unzip /home/ec2-user/TextUtility1.zip -d /var/www/html/'
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@143.205.147.204 'bash /home/ec2-user/scripts/install_dependencies.sh'
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@143.205.147.204 'bash /home/ec2-user/scripts/start_server.sh'

    - name: Update ELB to point to Blue environment (Server1)
      run: |
        aws elb register-instances-with-load-balancer \
          --load-balancer-name niete-test-lb \
          --instances i-blue-instance-id

        aws elb deregister-instances-from-load-balancer \
          --load-balancer-name niete-test-lb \
          --instances i-green-instance-id

    - name: Deploy to Green environment (Server2)
      run: |
        scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa TextUtility1.zip ec2-user@13.126.111.139:/home/ec2-user/
        scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r scripts ec2-user@13.126.111.139:/home/ec2-user/
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@13.126.111.139 'unzip /home/ec2-user/TextUtility1.zip -d /var/www/html/'
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@13.126.111.139 'bash /home/ec2-user/scripts/install_dependencies.sh'
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@13.126.111.139 'bash /home/ec2-user/scripts/start_server.sh'

    - name: Update ELB to point to Green environment (Server2)
      run: |
        aws elb register-instances-with-load-balancer \
          --load-balancer-name niete-test-lb \
          --instances i-green-instance-id

        aws elb deregister-instances-from-load-balancer \
          --load-balancer-name niete-test-lb \
          --instances i-blue-instance-id
